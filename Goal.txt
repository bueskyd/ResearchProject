caseInApp2C
\ (n :: Int) ->
  letrec {
    aux [Occ=LoopBreaker] :: Int -> (Int -> Int) -> Int
    [LclId,
     Unf=Unf{Src=<vanilla>, TopLvl=False,
             Value=True, ConLike=True, WorkFree=True, Expandable=True,
             Guidance=IF_ARGS [0 60] 380 0}]
    aux
      = \ (n :: Int) (c :: Int -> Int) ->
          case == @Int $fEqInt n (fromInteger @Int $fNumInt (IS 0#)) of {
            False ->
              aux
                (- @Int $fNumInt n (fromInteger @Int $fNumInt (IS 1#)))
                (\ (x :: Int) ->
                   c (+ @Int $fNumInt (fromInteger @Int $fNumInt (IS 1#)) x));
            True -> c (fromInteger @Int $fNumInt (IS 0#))
          }; } in
  aux n (id @Int)